package _049_lastStoneWeight

// 有一堆石头，用整数数组 stones 表示。其中 stones[i] 表示第 i 块石头的重量。
//
// 每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：
//
// 如果 x == y，那么两块石头都会被完全粉碎；
// 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。
// 最后，最多只会剩下一块 石头。返回此石头 最小的可能重量 。如果没有石头剩下，就返回 0。
//
//
//
// 示例 1：
//
// 输入：stones = [2,7,4,1,8,1]
// 输出：1
// 解释：
// 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，
// 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，
// 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，
// 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。
// 示例 2：
//
// 输入：stones = [31,26,33,21,40]
// 输出：5
//
//
// 提示：
//
// 1 <= stones.length <= 30
// 1 <= stones[i] <= 100

// 将问题转化为：将一堆石头分成两堆，求两堆石头重量差最小值。
// 设为负的那堆石头的总重量为 neg，则另一堆石头的总重量为 sum−neg，
// 则两堆石头的总重量之差为 sum−2⋅neg。
// 因此，问题转化为：需要从数组 stones 中选出一部分石头，
// 将这些石头的总重量之和不超过 sum/2，最接近 sum/2 的石头总重量是多少？
// 可以使用动态规划求解。
// 定义 dp[i+1][j] 表示前 i 个石头中选取若干个石头，
// 使得这些石头的总重量之和不超过 j 的最大总重量。
// 则状态转移方程为：
// dp[i+1][j]=max(dp[i][j],dp[i][j−stones[i]]+stones[i])	j≥stones[i]
// dp[i+1][j]=dp[i][j]	j<stones[i]
func lastStoneWeightII(stones []int) int {

	return -1
}
