package _88_maxProfit

// 188. 买卖股票的最佳时机 IV
// 给你一个整数数组 prices 和一个整数 k ，其中 prices[i] 是某支给定的股票在第 i 天的价格。
//
// 设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。也就是说，你最多可以买 k 次，卖 k 次。
//
// 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
//
// 示例 1：
//
// 输入：k = 2, prices = [2,4,1]
// 输出：2
// 解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。
// 示例 2：
//
// 输入：k = 2, prices = [3,2,6,5,0,3]
// 输出：7
// 解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
//
//	随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。
//
// 提示：
//
// 1 <= k <= 100
// 1 <= prices.length <= 1000
// 0 <= prices[i] <= 1000

// 定义f[i][j], 其中 i 为股票的天数
// j ∈[0, 2k] (n=len(prices)), j 为奇数时代表第j+1/2次交易买入, j为偶数时代表第j/2次交易卖出
// f[i][j] 则代表第i天 第 (j+1)/2 或者 j/2 次买入/卖出时能获得的最大收益

func maxProfit(k int, prices []int) int {
	N := len(prices)
	f := make([][]int, N)
	for id := range f {
		f[id] = make([]int, 2*k+1)
	}
	for i := 0; i < (2*k + 1); i++ {
		// 这里第0天的第i次的卖出都为0 相当于买入之后马上又卖出
		// 第0天的第i次的买入,则为成本价取负
		if i%2 == 1 {
			f[0][i] = -prices[0]
		}
	}
	for i := 1; i < N; i++ {
		for j := 1; j < (2*k + 1); j++ {
			if j%2 == 0 {
				f[i][j] = max(f[i-1][j], f[i-1][j-1]+prices[i])
			} else {
				f[i][j] = max(f[i-1][j], f[i-1][j-1]-prices[i])
			}
		}
	}
	ans := 0
	for i := 0; i < (2*k + 1); i++ {
		if i%2 == 0 {
			ans = max(ans, f[N-1][i])
		}
	}
	return ans
}
